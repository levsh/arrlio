{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Arrlio - simple distributed system to send/receive messages or execute tasks.","title":"About"},{"location":"#about","text":"Arrlio - simple distributed system to send/receive messages or execute tasks.","title":"About"},{"location":"installation/","text":"Installation pip install arrlio","title":"Installation"},{"location":"installation/#installation","text":"pip install arrlio","title":"Installation"},{"location":"user_guide/backends/","text":"Arrlio provides three builtin backends: arrlio.backends.local arrlio.backends.rabbitmq arrlio.backends.redis Local Settings All environment varialbles should starts with {ENV_PREFIX}LOCAL_BACKEND_ . NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.nop\". Serializer module with Serializer class or callable(Serializer factory). RabbitMQ Settings All environment varialbles should starts with {ENV_PREFIX}RMQ_BACKEND_ . NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.json\". Serializer module with Serializer class or callable(Serializer factory). URL (BackendConfig.url), default: \"amqp://guest:guest@localhost\". RabbitMQ server url. TIMEOUT (BackendConfig.timeout), default: 10. RabbitMQ operation timeout, seconds. RETRY_TIMEOUTS (BackendConfig.retry_timeouts), default: None. Retry timeouts as sequence: [1, 2, 5]. VERIFY_SSL (BackendConfig.verify_ssl), default: True. TASKS_EXCHANGE (BackendConfig.tasks_exchange), default: \"arrlio\". Tasks RabbitMQ exchange. TASKS_QUEUE_DURABLE (BackendConfig.tasks_queue_durable), default: False. TASKS_QUEUE_TTL (BackendConfig.tasks_queue_ttl), default: None. x-message-ttl RabbitMQ option, seconds. TASKS_PREFETCH_COUNT (BackendConfig.tasks_prefetch_count), default: 1. RabbitMQ prefetch count options. EVENTS_EXCHANGE (BackendConfig.events_exchange), default: \"arrlio\". Events RabbitMQ exchange. EVENTS_QUEUE_DURABLE , (BackendConfig.events_queue_durable), default: False. EVENTS_QUEUE , (BackendConfig.events_queue), default: \"arrlio.events\". EVENTS_QUEUE_TTL (BackendConfig.events_queue_ttl), default: None. x-message-ttl RabbitMQ option, seconds. EVENTS_PREFETCH_COUNT (BackendConfig.events_prefetch_count), default: 1. RabbitMQ prefetch count options. MESSAGES_PREFETCH_COUNT (BackendConfig.messages_prefetch_count), default: 1. RabbitMQ prefetch count options. Redis Settings NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.json\". Serializer module with Serializer class or callable(Serializer factory). URL (BackendConfig.url), default: \"redis://localhost?db=0\". Redis server url. TIMEOUT (BackendConfig.timeout), default: 10. Redis operation timeout, seconds. CONNECT_TIMEOUT (BackendConfig.connect_timeout), default: 10. Redis connect timeout, seconds. RETRY_TIMEOUTS (BackendConfig.retry_timeouts), default: None. Retry timeouts as sequence: [1, 2, 5]. POOL_SIZE (BackendConfig.pool_size), default: 10. Redis connection pool size. VERIFY_SSL (BackendConfig.verify_ssl), default: True.","title":"Backends"},{"location":"user_guide/backends/#local","text":"","title":"Local"},{"location":"user_guide/backends/#settings","text":"All environment varialbles should starts with {ENV_PREFIX}LOCAL_BACKEND_ . NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.nop\". Serializer module with Serializer class or callable(Serializer factory).","title":"Settings"},{"location":"user_guide/backends/#rabbitmq","text":"","title":"RabbitMQ"},{"location":"user_guide/backends/#settings_1","text":"All environment varialbles should starts with {ENV_PREFIX}RMQ_BACKEND_ . NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.json\". Serializer module with Serializer class or callable(Serializer factory). URL (BackendConfig.url), default: \"amqp://guest:guest@localhost\". RabbitMQ server url. TIMEOUT (BackendConfig.timeout), default: 10. RabbitMQ operation timeout, seconds. RETRY_TIMEOUTS (BackendConfig.retry_timeouts), default: None. Retry timeouts as sequence: [1, 2, 5]. VERIFY_SSL (BackendConfig.verify_ssl), default: True. TASKS_EXCHANGE (BackendConfig.tasks_exchange), default: \"arrlio\". Tasks RabbitMQ exchange. TASKS_QUEUE_DURABLE (BackendConfig.tasks_queue_durable), default: False. TASKS_QUEUE_TTL (BackendConfig.tasks_queue_ttl), default: None. x-message-ttl RabbitMQ option, seconds. TASKS_PREFETCH_COUNT (BackendConfig.tasks_prefetch_count), default: 1. RabbitMQ prefetch count options. EVENTS_EXCHANGE (BackendConfig.events_exchange), default: \"arrlio\". Events RabbitMQ exchange. EVENTS_QUEUE_DURABLE , (BackendConfig.events_queue_durable), default: False. EVENTS_QUEUE , (BackendConfig.events_queue), default: \"arrlio.events\". EVENTS_QUEUE_TTL (BackendConfig.events_queue_ttl), default: None. x-message-ttl RabbitMQ option, seconds. EVENTS_PREFETCH_COUNT (BackendConfig.events_prefetch_count), default: 1. RabbitMQ prefetch count options. MESSAGES_PREFETCH_COUNT (BackendConfig.messages_prefetch_count), default: 1. RabbitMQ prefetch count options.","title":"Settings"},{"location":"user_guide/backends/#redis","text":"","title":"Redis"},{"location":"user_guide/backends/#settings_2","text":"NAME (BackendConfig.name), default: \"arrlio\". Backend name. SERIALIZER (BackendConfig.serializer), default: \"arrlio.serializers.json\". Serializer module with Serializer class or callable(Serializer factory). URL (BackendConfig.url), default: \"redis://localhost?db=0\". Redis server url. TIMEOUT (BackendConfig.timeout), default: 10. Redis operation timeout, seconds. CONNECT_TIMEOUT (BackendConfig.connect_timeout), default: 10. Redis connect timeout, seconds. RETRY_TIMEOUTS (BackendConfig.retry_timeouts), default: None. Retry timeouts as sequence: [1, 2, 5]. POOL_SIZE (BackendConfig.pool_size), default: 10. Redis connection pool size. VERIFY_SSL (BackendConfig.verify_ssl), default: True.","title":"Settings"},{"location":"user_guide/basic/","text":"Create your task: from arrlio import task @task def hello_world (): print ( \"Hello from Arrlio\" ) Create Arrlio application(by default local backend will be used): from arrlio import App , Config app = App ( Config ()) Start consuming tasks and run hello_world task: async with app : await app . consume_tasks () await app . send_task ( hello_world ) Summary: from arrlio import App , Config , task @task def hello_world (): print ( \"Hello from Arrlio\" ) app = App ( Config ()) async with app : await app . consume_tasks () await app . send_task ( hello_world )","title":"Basic"},{"location":"user_guide/settings/","text":"Arrlio supports configuration from environment variables or from Config object. All environment varialbles should starts with {ENV_PREFIX} . Default value for ENV_PREFIX is ARRLIO_ . General BACKEND (Config.backend), default: \"arrlio.backends.local\". Backend module with Backend and BackendConfig classes or callable(Backend factory). TASK_QUEUES (Config.task_queues), default: [\"arrlio.tasks\"]. Task queues to listen. MESSAGE_QUEUES (Config.message_queues), defaut: [\"arrlio.messages\"]. Message queues to listen. POOL_SIZE (Config.pool_size), default: 100. Worker pool size. Task TASK_QUEUE (Config.task.queue), default: \"arrlio.tasks\". Task queue. TASK_PRIORITY (Conig.task.priority), default: 1. Task priority. 0 - highest priority. TASK_TIMEOUT (Config.task.timeout), default: 300. Task execution timeout in seconds. TASK_TTL (Config.task.ttl), default: 300. Taks time to live in seconds. TASK_RESULT_RETURN (Config.task.result_return), default: True. Return or not task result. TASK_RESULT_TTL (Config.task.result_ttl), default: 300. Task result time to live, seconds. EVENTS (Config.task.events), default: False. Enable or disable task events. EVENT_TTL (Config.task.event_ttl), default: 300. Task event time to live in seconds. Message MESSAGE_EXCHANGE (Config.message.exchange), default: \"arrlio.messages\". Message exchange. MESSAGE_PRIORITY (Config.message.priority), default: 1. Message priority. 0 - highest priority. MESSAGE_TTL (Config.message.ttl), default: 300. Message time to live in seconds. Example from arrlio import App , Config , MessageConfig , TaskConfig config = Config ( backend = \"arrlio.backends.local\" , task_queues = [ \"tasks.default\" , \"tasks.backend\" , \"tasks.frontend\" ], ... task = TaskConfig ( queue = \"tasks.default\" , ttl = None , events = True , ... ) message = MessageConfig ( queue = \"messages.default\" , ... ) ) app = App ( config )","title":"General settings"},{"location":"user_guide/settings/#general","text":"BACKEND (Config.backend), default: \"arrlio.backends.local\". Backend module with Backend and BackendConfig classes or callable(Backend factory). TASK_QUEUES (Config.task_queues), default: [\"arrlio.tasks\"]. Task queues to listen. MESSAGE_QUEUES (Config.message_queues), defaut: [\"arrlio.messages\"]. Message queues to listen. POOL_SIZE (Config.pool_size), default: 100. Worker pool size.","title":"General"},{"location":"user_guide/settings/#task","text":"TASK_QUEUE (Config.task.queue), default: \"arrlio.tasks\". Task queue. TASK_PRIORITY (Conig.task.priority), default: 1. Task priority. 0 - highest priority. TASK_TIMEOUT (Config.task.timeout), default: 300. Task execution timeout in seconds. TASK_TTL (Config.task.ttl), default: 300. Taks time to live in seconds. TASK_RESULT_RETURN (Config.task.result_return), default: True. Return or not task result. TASK_RESULT_TTL (Config.task.result_ttl), default: 300. Task result time to live, seconds. EVENTS (Config.task.events), default: False. Enable or disable task events. EVENT_TTL (Config.task.event_ttl), default: 300. Task event time to live in seconds.","title":"Task"},{"location":"user_guide/settings/#message","text":"MESSAGE_EXCHANGE (Config.message.exchange), default: \"arrlio.messages\". Message exchange. MESSAGE_PRIORITY (Config.message.priority), default: 1. Message priority. 0 - highest priority. MESSAGE_TTL (Config.message.ttl), default: 300. Message time to live in seconds.","title":"Message"},{"location":"user_guide/settings/#example","text":"from arrlio import App , Config , MessageConfig , TaskConfig config = Config ( backend = \"arrlio.backends.local\" , task_queues = [ \"tasks.default\" , \"tasks.backend\" , \"tasks.frontend\" ], ... task = TaskConfig ( queue = \"tasks.default\" , ttl = None , events = True , ... ) message = MessageConfig ( queue = \"messages.default\" , ... ) ) app = App ( config )","title":"Example"},{"location":"user_guide/task_args/","text":"Positional arguments: from arrlio import App , Config , task @task def hello_world ( name : str ): print ( f \"Hello { name } \" ) app = App ( Config ()) async with app : await app . consume_tasks () await app . send_task ( hello_world , args = ( \"World\" ,)) Named arguments: from arrlio import App , Config , task @task def hello_world ( name : str = None ): name = name or \"World\" print ( f \"Hello { name } \" ) app = App ( Config ()) async with app : await app . consume_tasks () await app . send_task ( hello_world , kwds = { \"name\" : \"User\" })","title":"Task arguments"},{"location":"user_guide/task_result/","text":"from arrlio import App , Config , task @task def add_one ( x : int ): return x + 1 app = App ( Config ()) async with app : await app . consume_tasks () ar = await app . send_task ( add_one , args = ( 1 ,)) result = await ar . get () print ( f \"1 + 1 = { result } \" )","title":"Task result"}]}